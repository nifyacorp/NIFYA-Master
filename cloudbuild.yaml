steps:
  # Check if Dockerfile exists and create if needed
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if [ ! -f frontend/Dockerfile ]; then
          echo "Dockerfile not found, creating it..."
          cat > frontend/Dockerfile << 'EOF'
          # Build stage
          FROM node:18-alpine as build
          
          WORKDIR /app
          
          # Copy package files and install dependencies
          COPY package.json package-lock.json ./
          RUN npm ci
          
          # Copy the rest of the application
          COPY . .
          
          # Build the application
          RUN npm run build
          
          # Runtime stage
          FROM nginx:alpine
          
          # Copy the built app to nginx server
          COPY --from=build /app/dist /usr/share/nginx/html
          
          # Setup nginx configuration
          RUN echo 'server { \
            listen 8080; \
            server_name _; \
            root /usr/share/nginx/html; \
            index index.html; \
            \
            # Enable gzip compression \
            gzip on; \
            gzip_min_length 1000; \
            gzip_types text/plain text/css application/json application/javascript text/xml application/xml text/javascript; \
            \
            # Handle SPA routing \
            location / { \
                try_files $uri $uri/ /index.html; \
                add_header Cache-Control "no-cache"; \
            } \
            \
            # Cache static assets \
            location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ { \
                expires 30d; \
                add_header Cache-Control "public, max-age=2592000"; \
            } \
            \
            # Error pages \
            error_page 404 /index.html; \
            error_page 500 502 503 504 /50x.html; \
            location = /50x.html { \
                root /usr/share/nginx/html; \
            } \
          }' > /etc/nginx/conf.d/default.conf
          
          # Expose port
          EXPOSE 8080
          
          # Command to run the container
          CMD ["nginx", "-g", "daemon off;"]
          EOF
        fi

  # Build the container image
  - name: 'gcr.io/cloud-builders/docker'
    dir: 'frontend'
    args: ['build', '-t', 'gcr.io/$PROJECT_ID/nifya-frontend:$COMMIT_SHA', '.']

  # Push the container image to Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/nifya-frontend:$COMMIT_SHA']

  # Deploy container image to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args:
      - 'run'
      - 'deploy'
      - 'nifya-frontend'
      - '--image'
      - 'gcr.io/$PROJECT_ID/nifya-frontend:$COMMIT_SHA'
      - '--region'
      - 'us-central1'
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated'
      - '--port'
      - '8080'
      - '--set-env-vars'
      - 'AUTH_SERVICE_URL=https://authentication-service-415554190254.us-central1.run.app,BACKEND_SERVICE_URL=https://backend-415554190254.us-central1.run.app'

images:
  - 'gcr.io/$PROJECT_ID/nifya-frontend:$COMMIT_SHA'

timeout: '1800s'